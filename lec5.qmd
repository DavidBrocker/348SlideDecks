---
title: "Z-scores"
subtitle: "Lecture 5"
author: "Dave Brocker"
institute: "Farmingdale State College"
footer: "Standard Normal Distrubution | ⬡⬢⬡⬢⬡"
format: 
  revealjs:
    theme: custom.scss
    incremental: true   
    touch: true
    chalkboard: true
    slide-number: c/t
    width: 1600
    height: 900
    drop:
      engine: webr
      webr:
        packages:
         - ggplot2
         - dplyr
revealjs-plugins:
  - drop
  - editable
---

## Standard Normal Distribution

### What do we know about normal distributions?

::::: columns
::: {.column width="50%"}
```{r}
library(ggplot2)
library(dplyr)

# Create a function to calculate the normal distribution
normal_data <- data.frame(x = seq(-4, 4, by = 0.01))
normal_data$y <- dnorm(normal_data$x)

# Create the plot
ggplot(normal_data, aes(x = x, y = y)) +
  geom_line(size = 1.2) +
  theme_minimal(base_size = 20) +
  labs(
    x = "",
    y = ""
  ) +
  theme_sub_panel(
    grid.major =  element_blank()
  )
```
:::

::: {.column width="50%"}
-   They are shaped like a bell ("bell curve").

-   They are symmetric.

-   They are unimodal.

-   The mean = median = mode.
:::
:::::

## Standard Deviation

### Standard deviation is in the scale of the variable (`x`).

::::: columns
::: {.column width="50%"}
```{r}
set.seed(348) 

ex1 <- 
  tibble(
  lec5 = rnorm(1000,97,1), 
  xx = 
    dnorm(
      lec5, 
      mean(lec5), 
      sd(lec5)
      )
  ) |> 
  ggplot(aes(lec5,xx)) +
  geom_line() + 
  scale_x_continuous(breaks = 94:100) +
  theme_minimal(base_size = 22) +
  labs(
    x = "",
    y = ""
  )

ex1
```
:::

::: {.column width="50%"}
-   A standard deviation of 1 means a distance of 1 on the scale used to measure the variable.
-   Jonas scores a `98` on the exam. The average grade on the exam was `97` with a standard deviation of `1`.
    -   Find Jonas' score on the normal distribution.
:::
:::::

## Standard Deviation

### Standard deviation is in the scale of the variable (`x`).

::::: columns
::: {.column width="50%"}
```{r}
set.seed(348) 

tibble(
  lec5 = rnorm(1000,97,1), 
  xx = 
    dnorm(
      lec5, 
      mean(lec5), 
      sd(lec5)
      )
  ) |> 
  ggplot(aes(lec5,xx)) +
  geom_line() + 
  geom_vline(xintercept = 98, color = "red", size = 2) +
  geom_vline(xintercept = 97, color = "black", lty = "dashed") +
  scale_x_continuous(breaks = 94:100) +
  theme_minimal(base_size = 22) +
  labs(
    x = "",
    y = ""
  )
```
:::

::: {.column width="50%"}
-   Jonas scores a `98` on the exam. The average grade on the exam was `97` with a standard deviation of `1`.
    -   Find Jonas' score on the normal distribution.
:::
:::::

## Standard Normal Distribution

### Percentages and Proportions

::::: columns
::: {.column width="50%"}
-   68.3% of the data will fall within 1 SD of the mean.

-   95.4% of the data will fall within 2 SD of the mean.

-   99.7% of the data will fall within 3 SD of the mean.

-   "Within one standard deviation" means +1 as well as -1 standard deviation.
:::

::: {.column width="50%"}
![](images/bell_prop2.png)
:::
:::::

## Standard Normal Distribution

### Example 1

> Students' ratings of the Netflix Original *Dark* (range = 1- 10) form a normal distribution with m = 6 and s = 1.

::::: columns
::: {.column width="50%"}
-   What percentage of Students rate it a 7 or higher?

-   What percentage of Students rate it at least a 4?

-   What percentage of Students rate it an 8 or lower?
:::

::: {.column width="50%"}
```{r}
  tibble(
  lec5 = rnorm(1000,6,1), 
  xx = 
    dnorm(
      lec5, 
      mean(lec5), 
      sd(lec5)
      )
  ) |> 
  ggplot(aes(lec5,xx)) +
  geom_line() + 
  theme_minimal(base_size = 22) +
  labs(
    x = "",
    y = ""
  )

```
:::
:::::

## Standard Normal Distribution

### Example 1:

> Students' ratings of the Netflix Original *Dark* form a normal distribution with m = 6 and s = 1.

::::: columns
::: {.column width="50%"}
-   What percentage of Students rate it a 7 or higher?

-   15.8% (13.6 [1SD] + 2.1[2SD] + .1[3SD])
:::

::: {.column width="50%"}
```{r}
aa1 <- 
  tibble(
  lec5 = rnorm(1000,6,1), 
  xx = 
    dnorm(
      lec5, 
      mean(lec5), 
      sd(lec5)
      )
  )

aa1 |> 
  ggplot(aes(lec5,xx)) +
  geom_line() + 
  geom_vline(xintercept = 6, lty = "dashed") +
  geom_area(
    data = 
      aa1 |> 
      filter(lec5 >= 7),
    fill = "lightblue", 
    alpha = 0.5
    ) +
    scale_x_continuous(
    breaks = 2:12,
      sec.axis = 
        dup_axis(
          breaks = 3:9,
          labels = paste0(-3:3, "(SD)")
          )
      ) +
  theme_minimal(base_size = 22) +
  labs(
    x = "",
    y = ""
  ) + 
  theme_sub_panel(
    grid.major =element_blank()
  )

```
:::
:::::

## Standard Normal Distribution

### Example 1:

> Students' ratings of the Netflix Original *Dark* form a normal distribution with m = 6 and s = 1.

::::: columns
::: {.column width="50%"}
-   What percentage of Students rate it at least a 4?

-   2.2%
:::

::: {.column width="50%"}
```{r}
aa2 <- tibble(
  lec5 = rnorm(1000,6,1), 
  xx = 
    dnorm(
      lec5, 
      mean(lec5), 
      sd(lec5)
      )
  )

aa2 |> 
  ggplot(aes(lec5,xx)) +
  geom_line() + 
  geom_vline(xintercept = 6, lty = "dashed") +
  geom_area(
    data = 
      aa2 |> 
      filter(lec5 <=4),
    fill = "lightblue", 
    alpha = 0.5
    ) +
  scale_x_continuous(
    breaks = 2:12,
      sec.axis = 
        dup_axis(
          breaks = 3:9,
          labels = paste0(-3:3, "(SD)")
          )
      ) +
  theme_minimal(base_size = 22) +
  labs(
    x = "",
    y = ""
  ) + 
  theme_sub_panel(
    grid.major =element_blank()
  )

```
:::
:::::

## Standard Normal Distribution

### Example 1:

> Students' ratings of the Netflix Original *Dark* form a normal distribution with m = 6 and s = 1.

::::: columns
::: {.column width="50%"}
-   What percentage of Students rate it an 8 or lower?

-   97.6%
:::

::: {.column width="50%"}
```{r}

aa3 <- 
  tibble(
  lec5 = rnorm(1000,6,1), 
  xx = 
    dnorm(
      lec5, 
      mean(lec5), 
      sd(lec5)
      )
  )

aa3 |> 
  ggplot(aes(lec5,xx)) +
  geom_line() + 
  geom_vline(xintercept = 6, lty = "dashed") +
  geom_area(
    data = 
      aa3 |> 
      filter(lec5 <=8),
    fill = "lightblue", 
    alpha = 0.5
    ) +
  theme_minimal(base_size = 22) +
    scale_x_continuous(
    breaks = 2:12,
      sec.axis = 
        dup_axis(
          breaks = 3:9,
          labels = paste0(-3:3, "(SD)")
          )
      ) +
  labs(
    x = "",
    y = ""
  ) + 
  theme_sub_panel(
    grid.major =element_blank()
  )

```
:::
:::::

## Z-scores

### What does it do?

A z-score tells you, in standard deviation units how far the x-value is from the mean.

-   Z-scores are better than using raw SD

-   When the SD is a decimal, it is hard to find the exact point under the standard normal curve.

## Z-scores

### Rule of Thumb

::::: columns
::: {.column width="50%"}
![](images/bell_prop2.png){fig-align="center"}
:::

::: {.column width="50%"}
-   The distance from the mean to the 1 on this standard normal curve is equal to the SD.
-   The distance from the mean to the 1 on this standard normal curve is equal to z=1.
:::
:::::

## Z-scores:

### Find: Z = 1 \| Z = -2 \| Z = 0.5

![](images/bell_prop2.png)

## Z-scores

### What do they do!

-   Z-scores re-express the original data points (the `x`'s) in a way that intuitively lets us know:

-   How close the `x` is to the mean (*how much this particular participant is like the average person in the sample*)

-   Where it falls in the dispersion of the distribution (*how different this particular participant is from the majority of people in the sample*)

## Calculating

### Z-scores

::: callout-tip
## Formula

$$
z = \large{\frac{\color{orange}{x}-\color{red}{\bar{x}}}{\color{pink}{s}}}
$$
:::

-   Subtract each [x]{style="color:orange"} value from the [mean]{style="color:red"}.

-   Divide by the [standard deviation]{style="color:pink"}

## Practice Examples

### Example 1

z = $\frac{x - \mu}{\sigma}$

-   Mean ($\mu$) = 50

-   Standard deviation ($\sigma$) = 10

-   Raw score (x) = 65

-   Find the z-score.

- $\frac{65-50}{10} = 1.5$

## Practice Examples

### Example 2

-   Mean ($\mu$) = 100

-   Standard deviation ($\sigma$) = 15

-   Raw score (x) = 85

-   Find the z-score.

- $\frac{85-100}{15} = -1$

## Practice Examples

### Example 3

-   Mean ($\mu$) = 70

-   Standard deviation ($\sigma$) = 8

-   Raw score (x) = 66

-   Find the z-score.

- $\frac{66-70}{8} = .5

## Practice Examples

### Example 4

-   Mean ($\mu$) = 500

-   Standard deviation ($\sigma$) = 120

-   Raw score (x) = 740

-   Find the z-score.

- $\frac{740-500}{120} = 2$

## Practice Examples

### Example 5

-   Mean ($\mu$) = 40

-   Standard deviation ($\sigma$) = 6

-   z-score = +2.5

-   Find the raw score (x).

- $2.5 = \frac{x-40}{6}$

- $x = z\times s = 2.5\times6=15$

## Z-scores

### Z-Scores are calculated by

-   Centering the X values on the mean: When we center the mean (mean-centering), we set the mean to 0.

-   Dividing by the standard deviation

-   When we divide by the SD, the space from the mean is expressed in standard deviations.

## Z-scores

### A Familiar Face: $\bar{x} = 20$

```{r}
library(dplyr)
library(gt)

tibble(
  x = c(10,10,20,30,30),
  m = 20,
  `x-xbar` = x-mean(x),
  `(x-xbar)^2` = (x-mean(x))^2
) |>
  gt() |> 
  cols_label(
    x = md("$x$"),
    m = md("$\\bar{x}$"),
    `x-xbar` = md("$x-\\bar{x}$"),
    `(x-xbar)^2` = md("$(x-\\bar{x})^2$")
  ) |> 
  opt_row_striping() |> 
  tab_options(
    table.font.size = px(25), # Adjust font size
    table.width = pct(80)   # Set table width as percentage,
  ) |> 
    tab_style(
    style = 
      cell_text(
        weight = "bold"),
        locations = 
      cells_column_labels()
    ) |> 
  fmt_auto()

```

## Z-scores

### Formula in Action

::::::::: columns
:::: {.column width="33%"}
::: callout-tip
## Average

$$\color{red}{\bar{x}} = \frac{\sum{x}}{n}$$
:::
::::

:::: {.column width="33%"}
::: callout-tip
## Standard Deviation

$$s^2 = \sqrt{\frac{\sum(x-\color{red}{\bar{x}})^2}{n-1}} = \frac{400}{4} = \sqrt{100} = s$$
:::
::::

:::: {.column width="33%"}
::: callout-tip
## Z-Score

$$z =\frac{x-\color{red}{\bar{x}}}{s} =  \frac{20-10}{s}=\frac{-10}{s}$$
:::
::::
:::::::::

## Z-scores

::::: columns
::: {.column width="50%"}
```{r}
tibble(
  x = c(10,10,20,30,30),
  `x-xbar` = x-mean(x),
  `(x-xbar)^2` = (x-mean(x))^2,
  z = (x-mean(x))/sd(x)
) |> 
  gt() |> 
  cols_label(
    x = md("$x$"),
    `x-xbar` = md("$x-\\bar{x}$"),
    `(x-xbar)^2` = md("$(x-\\bar{x})^2$"),
    z = md("$z=\\frac{(x-\\bar{x})^2}{s}$")
  ) |> 
    tab_options(
    table.font.size = px(30), # Adjust font size
    table.width = pct(80)   # Set table width as percentage
    ) |> 
    tab_style(
    style = 
      cell_text(
        weight = "bold"),
        locations = 
      cells_column_labels()
    ) |> 
  fmt_auto()
```
:::

::: {.column width="50%"}
-   We made the mean = 0: When you mean-center a distribution, you shift it along the number line.

-   We made the SD = 1: When you divide a distribution by the SD, you shrink the distribution down.

-   **The shape of the distribution remains the same.**
:::
:::::

## Z-scores

::: {.incremental .highlight-last}
-   Shift distribution along the number line.

-   Shrink distribution down.

-   **The shape of the distribution remains the same.**
:::

```{r}
#| fig-align: center
library(ggplot2)
library(patchwork)

p1 <- 
  tibble(
  id = 1:5,
  score = c(10,10,20,30,30)
) |> 
  ggplot(aes(score,id)) + 
  geom_point(size = 3) + 
  theme_minimal() + 
  labs(x = "\nExam Score",
       y = "Student\n",
       title = "Raw Scores") + 
  theme(panel.grid.major = element_blank())


p2 <- 
  tibble(
    id = 1:5,
    score = c(10,10,20,30,30),
    `x-xbar` = score - mean(score)
  ) |> 
  ggplot(aes(`x-xbar`,id)) + 
  geom_point(size = 3) + 
  theme_minimal() + 
  labs(x = "\nExam Score",
       y = "Student\n",
       title = "Deviation Scores") + 
  theme(panel.grid.major = element_blank())
  
  
p3 <- 
  tibble(
  id =  1:5,
  score = c(10,10,20,30,30),
  z = (score-mean(score))/sd(score)
) |> 
  ggplot(aes(z,id)) + 
  geom_point(size = 3) + 
  theme_minimal() + 
  labs(x = "\nExam Score",
       y = "Student\n",
       title = "Z-Scores") +
  scale_x_continuous(limits = c(-20,20)) + 
  theme(panel.grid.major = element_blank())

p1 + p2 + p3
```

## Z-Scores

### Why Do We Care?

::: {.incremental .highlight-last}
-   A z-score tells me where my score falls in SD units.

-   I can then look at this standard normal curve, and estimate what percentage of people did better or worse than me.
:::

## Z-Scores

### Why Do We Care?

> The mean score for Exam 1 was a 92 with a standard deviation of 3.

::::: columns
::: {.column width="50%"}
-   Esmeralda scored an 86.

-   What percent of the class scored better than Esmeralda?

-   $z=\frac{x-\bar{x}}{s} = \frac{86-92}{3} = -2$

-   98% of the class did better than Esmeralda.
:::

::: {.column width="50%"}
```{r}
set.seed(348) 


tibble(
  lec5 = rnorm(1000,92,3), 
  xx = 
    dnorm(
      lec5, 
      mean(lec5), 
      sd(lec5)
      )
  ) |> 
  ggplot(aes(lec5,xx)) +
  geom_line() + 
  theme_minimal(base_size = 22) +
  scale_x_continuous(
    breaks =  seq(83,101,by = 3),
    sec.axis = 
      dup_axis(
        breaks = seq(83,101,by = 3),
        labels = paste0(-3:3, "(SD)")
        )
    ) +
  labs(
    x = "",
    y = ""
  ) + geom_vline(xintercept = 86, color = "tomato", lty = "dashed") + 
    geom_vline(xintercept = 92, color = "black")
```
:::
:::::

## Z-Scores

> The mean score for Exam 1 was a 92 with a standard deviation of 3.

::::: columns
::: {.column width="50%"}
-   Jonas scored a 95.

-   What percent of the class scored better than Jonas?

-   $z = \frac{95-92}{3} = 1$

-   16% scored higher than Jonas.
:::

::: {.column width="50%"}
```{r}
set.seed(348) 

tibble(
  lec5 = rnorm(1000,92,3), 
  xx = 
    dnorm(
      lec5, 
      mean(lec5), 
      sd(lec5)
      )
  ) |> 
  ggplot(aes(lec5,xx)) +
  geom_line() + 
  theme_minimal(base_size = 22) +
  scale_x_continuous(
    breaks =  seq(83,101,by = 3),
    sec.axis = 
      dup_axis(
        breaks = seq(83,101,by = 3),
        labels = paste0(-3:3, "(SD)")
        )
    )
  labs(
    x = "",
    y = ""
  ) + geom_vline(xintercept = 95, color = "tomato", lty = "dashed") +
  geom_vline(xintercept = 92, color = "black")
```
:::
:::::