) |>
ggplot(aes(ratings,dx)) +
geom_point() +
theme_minimal()
tibble(
ratings = rnorm(10000,6.6,2)
) |>
mutate(
dx = dnorm(ratings,mean(ratings),sd(ratings)),
z = scale(ratings)
) |>
ggplot(aes(z,dx)) +
geom_point() +
theme_minimal()
tibble(
ratings = rnorm(10000,6.6,2)
) |>
mutate(
dx = dnorm(ratings,mean(ratings),sd(ratings)),
z = scale(ratings)
) |>
ggplot(aes(z,dx)) +
geom_point() +
theme_minimal() +
labs(
y = "Probability Density\n",
x = "\n"
)
tibble(
ratings = rnorm(10000,6.6,2)
) |>
mutate(
dx = dnorm(ratings,mean(ratings),sd(ratings)),
z = scale(ratings)
) |>
ggplot(aes(z,dx)) +
geom_point() +
theme_minimal() +
labs(
y = "Probability Density\n",
x = "\n"
)
tibble(
ratings = rnorm(10000,6.6,2)
) |>
mutate(
dx = dnorm(ratings,mean(ratings),sd(ratings)),
z = scale(ratings)
) |>
ggplot(aes(z,dx)) +
geom_point() +
theme_minimal() +
labs(
y = "Probability Density\n",
x = "\n"
) +
annotate(
geom = "text",
x = 0,
y = 0,
label = "mu"
)
install.packages("latex2exp")
library(latex2exp)
tibble(
ratings = rnorm(10000,6.6,2)
) |>
mutate(
dx = dnorm(ratings,mean(ratings),sd(ratings)),
z = scale(ratings)
) |>
ggplot(aes(z,dx)) +
geom_point() +
theme_minimal() +
labs(
y = "Probability Density\n",
x = "\n"
) +
annotate(
geom = "text",
x = 0,
y = 0,
label = TeX("$\\mu$")
)
tibble(
ratings = rnorm(10000,6.6,2)
) |>
mutate(
dx = dnorm(ratings,mean(ratings),sd(ratings)),
z = scale(ratings)
) |>
ggplot(aes(z,dx)) +
geom_point() +
theme_minimal() +
labs(
y = "Probability Density\n",
x = "\n"
) +
annotate(
geom = "text",
x = 0,
y = 0,
label = TeX("$\\mu$")
) +
annotate(
geom = "text",
x = -1,
y = 0,
label = TeX("-1$\\sigma$")
)
tibble(
ratings = rnorm(10000,6.6,2)
) |>
mutate(
dx = dnorm(ratings,mean(ratings),sd(ratings)),
z = scale(ratings)
) |>
ggplot(aes(z,dx)) +
geom_point() +
theme_minimal() +
labs(
y = "Probability Density\n",
x = "\n"
) +
annotate(
geom = "text",
x = 0,
y = 0,
label = TeX("$\\mu$")
) +
annotate(
geom = "text",
x = -1,
y = 0,
label = TeX("-1$\\sigma$")
) +
annotate(
geom = "text",
x = 1,
y = 0,
label = TeX("1$\\sigma$")
)
# Create a function to calculate the normal distribution
normal_data <- data.frame(x = seq(-4, 4, by = 0.01))
normal_data$y <- dnorm(normal_data$x)
# Create the plot
p <- ggplot(normal_data, aes(x = x, y = y)) +
geom_line(size = 1.2) +
geom_area(data = subset(normal_data, x >= -1 & x <= 1), aes(y = y), fill = "lightblue", alpha = 0.5) +
geom_area(data = subset(normal_data, x >= -2 & x <= -1 | x >= 1 & x <= 2), aes(y = y), fill = "blue", alpha = 0.5) +
geom_area(data = subset(normal_data, x >= -3 & x <= -2 | x >= 2 & x <= 3), aes(y = y), fill = "darkblue", alpha = 0.5) +
# Add vertical lines for standard deviations
geom_vline(xintercept = c(-1, 1), linetype = "dashed") +
geom_vline(xintercept = c(-2, 2), linetype = "dashed") +
geom_vline(xintercept = c(-3, 3), linetype = "dashed") +
# Add percentage labels
annotate("text", x = 0, y = 0.38, label = "34.1%", size = 5) +
annotate("text", x = -2, y = 0.1, label = "13.6%", size = 5) +
annotate("text", x = 2, y = 0.1, label = "13.6%", size = 5) +
annotate("text", x = -3, y = 0.02, label = "2.1%", size = 5) +
annotate("text", x = 3, y = 0.02, label = "2.1%", size = 5) +
annotate("text", x = -4, y = 0, label = "0.1%", size = 5) +
annotate("text", x = 4, y = 0, label = "0.1%", size = 5) +
# Adjust plot appearance
theme_minimal() +
labs(title = "Standard Normal Distribution", x = "Standard Deviations", y = "Density") +
scale_x_continuous(breaks = seq(-4, 4, 1))
# Display the plot
print(p)
# Create a function to calculate the normal distribution
normal_data <- data.frame(x = seq(-4, 4, by = 0.01))
normal_data$y <- dnorm(normal_data$x)
# Create the plot
p <- ggplot(normal_data, aes(x = x, y = y)) +
geom_line(size = 1.2) +
geom_area(data = subset(normal_data, x >= -1 & x <= 1), aes(y = y), fill = "lightblue", alpha = 0.5) +
geom_area(data = subset(normal_data, x >= -2 & x <= -1 | x >= 1 & x <= 2), aes(y = y), fill = "blue", alpha = 0.5) +
geom_area(data = subset(normal_data, x >= -3 & x <= -2 | x >= 2 & x <= 3), aes(y = y), fill = "darkblue", alpha = 0.5) +
# Add vertical lines for standard deviations
geom_vline(xintercept = c(-1, 1), linetype = "dashed") +
geom_vline(xintercept = c(-2, 2), linetype = "dashed") +
geom_vline(xintercept = c(-3, 3), linetype = "dashed") +
# Add percentage labels
annotate("text", x = 0, y = 0.38, label = "34.1%", size = 5) +
annotate("text", x = -2, y = 0.1, label = "13.6%", size = 5) +
annotate("text", x = 2, y = 0.1, label = "13.6%", size = 5) +
annotate("text", x = -3, y = 0.02, label = "2.1%", size = 5) +
annotate("text", x = 3, y = 0.02, label = "2.1%", size = 5) +
annotate("text", x = -4, y = 0, label = "0.1%", size = 5) +
annotate("text", x = 4, y = 0, label = "0.1%", size = 5) +
# Adjust plot appearance
theme_minimal() +
labs(title = "Standard Normal Distribution", x = "Standard Deviations", y = "Density") +
scale_x_continuous(breaks = seq(-4, 4, 1))
p
# Create a function to calculate the normal distribution
normal_data <- data.frame(x = seq(-4, 4, by = 0.01))
normal_data$y <- dnorm(normal_data$x)
# Create the plot
p <- ggplot(normal_data, aes(x = x, y = y)) +
geom_line(size = 1.2) +
geom_area(data = subset(normal_data, x >= -1 & x <= 1), aes(y = y), fill = "lightblue", alpha = 0.5) +
geom_area(data = subset(normal_data, x >= -2 & x <= -1 | x >= 1 & x <= 2), aes(y = y), fill = "blue", alpha = 0.5) +
geom_area(data = subset(normal_data, x >= -3 & x <= -2 | x >= 2 & x <= 3), aes(y = y), fill = "darkblue", alpha = 0.5) +
# Add vertical lines for standard deviations
geom_vline(xintercept = c(-1, 1), linetype = "dashed") +
geom_vline(xintercept = c(-2, 2), linetype = "dashed") +
geom_vline(xintercept = c(-3, 3), linetype = "dashed") +
# Add percentage labels
annotate("text", x = 0, y = 0.38, label = "34.1%", size = 3) +
annotate("text", x = -2, y = 0.1, label = "13.6%", size = 5) +
annotate("text", x = 2, y = 0.1, label = "13.6%", size = 5) +
annotate("text", x = -3, y = 0.02, label = "2.1%", size = 5) +
annotate("text", x = 3, y = 0.02, label = "2.1%", size = 5) +
annotate("text", x = -4, y = 0, label = "0.1%", size = 5) +
annotate("text", x = 4, y = 0, label = "0.1%", size = 5) +
# Adjust plot appearance
theme_minimal() +
labs(title = "Standard Normal Distribution", x = "Standard Deviations", y = "Density") +
scale_x_continuous(breaks = seq(-4, 4, 1))
p
# Create a function to calculate the normal distribution
normal_data <- data.frame(x = seq(-4, 4, by = 0.01))
normal_data$y <- dnorm(normal_data$x)
# Create the plot
p <- ggplot(normal_data, aes(x = x, y = y)) +
geom_line(size = 1.2) +
geom_area(data = subset(normal_data, x >= -1 & x <= 1), aes(y = y), fill = "lightblue", alpha = 0.5) +
geom_area(data = subset(normal_data, x >= -2 & x <= -1 | x >= 1 & x <= 2), aes(y = y), fill = "blue", alpha = 0.5) +
geom_area(data = subset(normal_data, x >= -3 & x <= -2 | x >= 2 & x <= 3), aes(y = y), fill = "darkblue", alpha = 0.5) +
# Add vertical lines for standard deviations
geom_vline(xintercept = c(-1, 1), linetype = "dashed") +
geom_vline(xintercept = c(-2, 2), linetype = "dashed") +
geom_vline(xintercept = c(-3, 3), linetype = "dashed") +
# Add percentage labels
annotate("text", x = 0, y = 0.32, label = "34.1%", size = 5) +
annotate("text", x = -2, y = 0.1, label = "13.6%", size = 5) +
annotate("text", x = 2, y = 0.1, label = "13.6%", size = 5) +
annotate("text", x = -3, y = 0.02, label = "2.1%", size = 5) +
annotate("text", x = 3, y = 0.02, label = "2.1%", size = 5) +
annotate("text", x = -4, y = 0, label = "0.1%", size = 5) +
annotate("text", x = 4, y = 0, label = "0.1%", size = 5) +
# Adjust plot appearance
theme_minimal() +
labs(title = "Standard Normal Distribution", x = "Standard Deviations", y = "Density") +
scale_x_continuous(breaks = seq(-4, 4, 1))
p
?geom_vline()
# Create a function to calculate the normal distribution
normal_data <- data.frame(x = seq(-4, 4, by = 0.01))
normal_data$y <- dnorm(normal_data$x)
# Create the plot
p <- ggplot(normal_data, aes(x = x, y = y)) +
geom_line(size = 1.2) +
geom_area(data = subset(normal_data, x >= -1 & x <= 1), aes(y = y), fill = "lightblue", alpha = 0.5) +
geom_area(data = subset(normal_data, x >= -2 & x <= -1 | x >= 1 & x <= 2), aes(y = y), fill = "blue", alpha = 0.5) +
geom_area(data = subset(normal_data, x >= -3 & x <= -2 | x >= 2 & x <= 3), aes(y = y), fill = "darkblue", alpha = 0.5) +
# Add vertical lines for standard deviations
geom_vline(xintercept = c(-1, 1), linetype = "dashed") +
geom_vline(xintercept = c(-2, 2), linetype = "dashed") +
geom_vline(xintercept = c(-3, 3), linetype = "dashed") +
# Add percentage labels
annotate("text", x = 0, y = 0.32, label = "34.1%", size = 5) +
annotate("text", x = -1.5, y = 0.1, label = "13.6%", size = 5) +
annotate("text", x = 1.5, y = 0.1, label = "13.6%", size = 5) +
annotate("text", x = -3, y = 0.02, label = "2.1%", size = 5) +
annotate("text", x = 3, y = 0.02, label = "2.1%", size = 5) +
annotate("text", x = -4, y = 0, label = "0.1%", size = 5) +
annotate("text", x = 4, y = 0, label = "0.1%", size = 5) +
# Adjust plot appearance
theme_minimal() +
labs(title = "Standard Normal Distribution", x = "Standard Deviations", y = "Density") +
scale_x_continuous(breaks = seq(-4, 4, 1))
p
# Create a function to calculate the normal distribution
normal_data <- data.frame(x = seq(-4, 4, by = 0.01))
normal_data$y <- dnorm(normal_data$x)
# Create the plot
p <- ggplot(normal_data, aes(x = x, y = y)) +
geom_line(size = 1.2) +
geom_area(data = subset(normal_data, x >= -1 & x <= 1), aes(y = y), fill = "lightblue", alpha = 0.5) +
geom_area(data = subset(normal_data, x >= -2 & x <= -1 | x >= 1 & x <= 2), aes(y = y), fill = "blue", alpha = 0.5) +
geom_area(data = subset(normal_data, x >= -3 & x <= -2 | x >= 2 & x <= 3), aes(y = y), fill = "darkblue", alpha = 0.5) +
# Add vertical lines for standard deviations
geom_vline(xintercept = c(-1, 1), linetype = "dashed") +
geom_vline(xintercept = c(-2, 2), linetype = "dashed") +
geom_vline(xintercept = c(-3, 3), linetype = "dashed") +
# Add percentage labels
annotate("text", x = 0, y = 0.32, label = "34.1%", size = 5) +
annotate("text", x = -1.5, y = 0.05, label = "13.6%", size = 5) +
annotate("text", x = 1.5, y = 0.05, label = "13.6%", size = 5) +
annotate("text", x = -3, y = 0.02, label = "2.1%", size = 5) +
annotate("text", x = 3, y = 0.02, label = "2.1%", size = 5) +
annotate("text", x = -4, y = 0, label = "0.1%", size = 5) +
annotate("text", x = 4, y = 0, label = "0.1%", size = 5) +
# Adjust plot appearance
theme_minimal() +
labs(title = "Standard Normal Distribution", x = "Standard Deviations", y = "Density") +
scale_x_continuous(breaks = seq(-4, 4, 1))
p
library(dplyr)
library(ggplot2)
# Collect 500 Random Samples 25 Times
replicate(
25,
runif(500,1,5) |> round(0)
) |>
# Coerce into Dataframe
data.frame() |>
# Calculate mean
summarise_all(mean) |>
tidyr::pivot_longer(
everything(),
names_to = "sample",
values_to = "sample_mean"
) |>
# Plot
ggplot(aes(sample_mean)) +
geom_histogram(
fill = "coral"
) +
theme_minimal() +
labs(
x = "Sample Mean",
y = "Frequency"
)
library(dplyr)
library(ggplot2)
# Collect 500 Random Samples 25 Times
replicate(
25,
rnorm(500,4.2,1) |> round(0)
) |>
# Coerce into Dataframe
data.frame() |>
# Calculate mean
summarise_all(mean) |>
tidyr::pivot_longer(
everything(),
names_to = "sample",
values_to = "sample_mean"
) |>
# Plot
ggplot(aes(sample_mean)) +
geom_histogram(
fill = "coral"
) +
theme_minimal() +
labs(
x = "Sample Mean",
y = "Frequency"
)
#| code-fold: true
library(dplyr)
library(tibble)
library(huxtable)
# 30 Students in the class
n = 30
# Each student asks 500 people
full_sample = n*500
# Simulate Results
all_data <-
replicate(n = 30,
sample(x = 1:7,
size = 500,
replace = TRUE)) |>
data.frame() |>
rename_with(.fn = function(x)
paste0("S", 1:30)) |>
all_data |>
head() |>
hux() |>
theme_article()
#| code-fold: true
library(ggplot2)
library(gganimate)
all_dat <-
all_data |>
summarize_all(mean) |>
tidyr::pivot_longer(cols = everything(),
names_to = "Sample",
values_to = "Sample Mean") |>
ggplot(aes(Student,Mean)) +
geom_point() +
coord_flip() +
theme_minimal() +
transition_time(Mean, range = c(1,25))
all_dat
#| code-fold: true
library(ggplot2)
library(gganimate)
all_dat <-
all_data |>
summarize_all(mean) |>
tidyr::pivot_longer(cols = everything(),
names_to = "Sample",
values_to = "Sample Mean") |>
ggplot(aes(Student,Mean)) +
geom_point() +
coord_flip() +
theme_minimal()
all_dat
#| code-fold: true
library(ggplot2)
library(gganimate)
all_dat <-
all_data |>
summarize_all(mean) |>
tidyr::pivot_longer(cols = everything(),
names_to = "Sample",
values_to = "Sample Mean") |>
ggplot(aes(Sample,Mean)) +
geom_point() +
coord_flip() +
theme_minimal()
all_dat
#| code-fold: true
library(ggplot2)
library(gganimate)
all_dat <-
all_data |>
summarize_all(mean) |>
tidyr::pivot_longer(cols = everything(),
names_to = "Sample",
values_to = "Sample Mean") |>
ggplot(aes(Sample,`Sample Mean`)) +
geom_point() +
coord_flip() +
theme_minimal()
#| code-fold: true
library(ggplot2)
library(gganimate)
all_data |>
summarize_all(mean) |>
tidyr::pivot_longer(cols = everything(),
names_to = "Sample",
values_to = "Sample Mean") |>
ggplot(aes(Sample,`Sample Mean`)) +
geom_point() +
coord_flip() +
theme_minimal()
#| code-fold: true
library(ggplot2)
library(gganimate)
all_data |>
summarize_all(mean) |>
tidyr::pivot_longer(cols = everything(),
names_to = "Sample",
values_to = "Sample Mean") |>
ggplot(aes(factor(Sample),`Sample Mean`)) +
geom_point() +
coord_flip() +
theme_minimal()
#| code-fold: true
library(ggplot2)
library(gganimate)
all_data |>
summarize_all(mean) |>
tidyr::pivot_longer(cols = everything(),
names_to = "Sample",
values_to = "Sample Mean") |>
ggplot(aes(factor(Sample,ordered = TRUE),`Sample Mean`)) +
geom_point() +
coord_flip() +
theme_minimal()
#| code-fold: true
library(dplyr)
library(tibble)
library(huxtable)
# 30 Students in the class
n = 30
# Each student asks 500 people
full_sample = n*500
# Simulate Results
all_data <-
replicate(n = 30,
sample(x = 1:7,
size = 500,
replace = TRUE)) |>
data.frame() |>
rename_with(.fn = function(x)
paste0("S", 1:30))
all_data |>
head() |>
hux() |>
theme_article()
#| code-fold: true
library(ggplot2)
library(gganimate)
all_data |>
summarize_all(mean) |>
tidyr::pivot_longer(cols = everything(),
names_to = "Sample",
values_to = "Sample Mean") |>
ggplot(aes(factor(Sample,ordered = TRUE),`Sample Mean`)) +
geom_point() +
coord_flip() +
theme_minimal()
tibble(
ratings = rnorm(10000,6.6,2)
) |>
mutate(
dx = dnorm(ratings,mean(ratings),sd(ratings)),
z = scale(ratings)
) |>
ggplot(aes(z,dx)) +
geom_point() +
theme_minimal() +
labs(
y = "Probability Density\n",
x = "\n"
)
