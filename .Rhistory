)
data <-
as |>
mutate(
yhat = predict(mod1) |> as.vector(),
res = Y - yhat
)
data |>
ggplot(aes(X, Y)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
geom_segment(aes(xend = X, yend = yhat)) +
theme_minimal() +
labs(
title = "Simple Linear Regression",
x = "\nX",
y = "Y\n",
caption = "Y = .35 + 77(x)"
) +
theme(
panel.grid = element_blank()
)
data |>
ggplot(aes(X, Y)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
geom_segment(aes(xend = X, yend = yhat),
lty = "dashed",
col = "darkred") +
theme_minimal() +
labs(
title = "Simple Linear Regression",
x = "\nX",
y = "Y\n",
caption = "Y = .35 + 77(x)"
) +
theme(
panel.grid = element_blank()
)
data |>
ggplot(aes(X, Y)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
geom_segment(aes(xend = X, yend = yhat),
lty = "dashed") +
theme_minimal() +
labs(
title = "Simple Linear Regression",
x = "\nX",
y = "Y\n",
caption = "Y = .35 + 77(x)"
) +
theme(
panel.grid = element_blank()
)
library(janitor)
hm <- read.csv("Horror Movie Data https___notawfulandboring.blogspot.com_ - Data.csv")
hm_cln <-
hm |>
clean_names() |>
dplyr::select(-movie,-avg_resting_heart_rate_bpm)
lm(scare_score ~ ., data = hm_cln) |>
tbl_regression()
?tbl_regression
library(janitor)
hm <- read.csv("Horror Movie Data https___notawfulandboring.blogspot.com_ - Data.csv")
hm_cln <-
hm |>
clean_names() |>
dplyr::select(-movie,-avg_resting_heart_rate_bpm)
lm(scare_score ~ ., data = hm_cln) |>
tbl_regression(label =
list("Ranking" = "ranking",
"Avg. Heart Rate (BPM)" = "avg_movie_heart_rate_bpm",
"Overall Difference (BPM)" = "overall_difference_bpm",
"HRV Difference" = "hrv_difference",
"Highest Spike" ="highest_spike_bpm",
"Sequel" ="this_film_is_a_sequelyes",
"At Least One Sequel" ="this_film_has_at_least_one_sequelyes",
"Rotten Tomato Score" ="rotten_tomato_score",
"Year" ="year"))
library(janitor)
hm <- read.csv("Horror Movie Data https___notawfulandboring.blogspot.com_ - Data.csv")
hm_cln <-
hm |>
clean_names() |>
dplyr::select(-movie,-avg_resting_heart_rate_bpm)
lm(scare_score ~ ., data = hm_cln) |>
tbl_regression(label =
list("ranking" = "Ranking",
"avg_movie_heart_rate_bpm" = "Avg. Heart Rate (BPM)",
"overall_difference_bpm" = "Overall Difference (BPM)" ,
"hrv_difference" = "HRV Difference" ,
"highest_spike_bpm" = "Highest Spike" ,
"this_film_is_a_sequelyes" = "Sequel" ,
"this_film_has_at_least_one_sequelyes" = "At Least One Sequel",
"rotten_tomato_score" = "Rotten Tomato Score" ,
"year" = "Year" ))
lm(scare_score ~ ., data = hm_cln) |>
tbl_regression(label =
list("ranking" = "Ranking",
"avg_movie_heart_rate_bpm" = "Avg. Heart Rate (BPM)",
"overall_difference_bpm" = "Overall Difference (BPM)" ,
"hrv_difference" = "HRV Difference" ,
"highest_spike_bpm" = "Highest Spike",
"this_film_is_a_sequel" = "Sequel",
"this_film_has_at_least_one_sequel" = "At Least One Sequel",
"rotten_tomato_score" = "Rotten Tomato Score" ,
"year" = "Year" ))
3 + 1.5(6) + .7(2)
1.2(@)
1.2(2)
3 + (1.5*6) + (.7*2)
test <-
tibble(
money = rnorm(100,55,5),
x1 = rnorm(100,14,2),
x2 = rnorm(100,30,2)
)
mod1 <- lm(money ~ x1+x2, data = test) |> summary()
mod1 |> tbl_regression()
# Set seed for reproducibility
set.seed(123)
# Generate 30 participants
participants <- paste0("P", 1:30)
# Age: Randomly sampled from 18 to 50
age <- sample(18:50, 30, replace = TRUE)
# Sense of Belonging: Continuous scale from 0 to 10
belonging <- round(runif(30, min = 0, max = 10), 2)
# Generate social media use (hours per day) using a model
# Assume younger people and those with higher belonging use social media more
social_media_use <- 5 - (0.1 * age) + (0.3 * belonging) + rnorm(30, mean = 0, sd = 0.5)
# Create data frame
df_sob <- data.frame(
Participant = participants,
Age = age,
Sense_of_Belonging = belonging,
Social_Media_Use = round(social_media_use, 2)
)
lm(Social_Media_Use ~ Age ~ Sense_of_Belonging, data = df_sob) |> tbl_regression()
# Set seed for reproducibility
set.seed(123)
# Generate 30 participants
participants <- paste0("P", 1:30)
# Age: Randomly sampled from 18 to 50
age <- sample(18:50, 30, replace = TRUE)
# Sense of Belonging: Continuous scale from 0 to 10
belonging <- round(runif(30, min = 0, max = 10), 2)
# Generate social media use (hours per day) using a model
# Assume younger people and those with higher belonging use social media more
social_media_use <- 5 - (0.1 * age) + (0.3 * belonging) + rnorm(30, mean = 0, sd = 0.5)
# Create data frame
df_sob <- data.frame(
Participant = participants,
Age = age,
Sense_of_Belonging = belonging,
Social_Media_Use = round(social_media_use, 2)
)
lm(Social_Media_Use ~ Age + Sense_of_Belonging, data = df_sob) |> tbl_regression()
?tbl_regression
# Create Model
lm(Social_Media_Use ~
Age + Sense_of_Belonging,
data = df_sob) |>
tbl_regression(
intercept = TRUE
)
# Create Model
lm(Social_Media_Use ~
Age + Sense_of_Belonging,
data = df_sob) |>
tbl_regression(
intercept = TRUE,
add_estimate_to_reference_rows = TRUE
)
# Create Model
lm(Social_Media_Use ~
Age + Sense_of_Belonging,
data = df_sob) |>
tbl_regression(
intercept = TRUE
) |>
gt::tab_header(title = "Social Media Use Model")
# Create Model
lm(Social_Media_Use ~
Age + Sense_of_Belonging,
data = df_sob) |>
tbl_regression(
intercept = TRUE
) |>
gt() |>
tab_header(title = "Social Media Use Model")
library(gt)
# Set seed for reproducibility
set.seed(123)
# Generate 30 participants
participants <- paste0("P", 1:30)
# Age: Randomly sampled from 18 to 50
age <- sample(18:50, 30, replace = TRUE)
# Sense of Belonging: Continuous scale from 0 to 10
belonging <- round(runif(30, min = 0, max = 10), 2)
# Generate social media use (hours per day) using a model
# Assume younger people and those with higher belonging use social media more
social_media_use <- 5 - (0.1 * age) + (0.3 * belonging) + rnorm(30, mean = 0, sd = 0.5)
# Create data frame
df_sob <- data.frame(
Participant = participants,
Age = age,
Sense_of_Belonging = belonging,
Social_Media_Use = round(social_media_use, 2)
)
# Create Model
lm(Social_Media_Use ~
Age + Sense_of_Belonging,
data = df_sob) |>
tbl_regression(
intercept = TRUE
) |>
gt() |>
tab_header(title = "Social Media Use Model")
# Create Model
lm(Social_Media_Use ~
Age + Sense_of_Belonging,
data = df_sob) |>
tbl_regression(
intercept = TRUE
) |>
as_gt() |>
tab_header(title = "Social Media Use Model")
library(broom)
lm(Social_Media_Use ~
Age + Sense_of_Belonging,
data = df_sob) |>
tidy() |>
gt()
lm(Social_Media_Use ~
Age + Sense_of_Belonging,
data = df_sob) |>
summary() |>
tidy() |>
gt()
lm(Social_Media_Use ~
Age + Sense_of_Belonging,
data = df_sob) |>
summary()
samp <- lm(Social_Media_Use ~
Age + Sense_of_Belonging,
data = df_sob) |>
summary()
samp
samp$fstatistic
sm_mod
# Create Model
sm_mod <-
lm(Social_Media_Use ~
Age + Sense_of_Belonging,
data = df_sob) |>
tbl_regression(
intercept = TRUE
) |>
as_gt() |>
tab_header(title = "Social Media Use Model")
# Create Model
sm_mod <-
lm(Social_Media_Use ~
Age + Sense_of_Belonging,
data = df_sob) |>
tbl_regression(
intercept = TRUE
) |>
as_gt() |>
tab_header(title = "Social Media Use Model")
# Show Model
sm_mod
samp <- lm(Social_Media_Use ~
Age + Sense_of_Belonging,
data = df_sob) |>
summary() |>
tidy() |>
gt()
samp
# Show Other Summaries
samp <-
lm(Social_Media_Use ~
Age + Sense_of_Belonging,
data = df_sob) |>
summary()
# Create a data frame with the desired values
model_results <- data.frame(
Metric = c("Residual Standard Error", "Multiple R-squared", "Adjusted R-squared", "F-statistic", "p-value"),
Value = c(
model_summary$sigma,                        # Residual Standard Error
model_summary$r.squared,                    # Multiple R-squared
model_summary$adj.r.squared,                # Adjusted R-squared
model_summary$fstatistic[1],                # F-statistic
pf(model_summary$fstatistic[1], model_summary$fstatistic[2], model_summary$fstatistic[3], lower.tail = FALSE)  # p-value
)
)
# Create a data frame with the desired values
samp_mod <- data.frame(
Metric = c("Residual Standard Error", "Multiple R-squared", "Adjusted R-squared", "F-statistic", "p-value"),
Value = c(
model_summary$sigma,                        # Residual Standard Error
model_summary$r.squared,                    # Multiple R-squared
model_summary$adj.r.squared,                # Adjusted R-squared
model_summary$fstatistic[1],                # F-statistic
pf(model_summary$fstatistic[1], model_summary$fstatistic[2], model_summary$fstatistic[3], lower.tail = FALSE)  # p-value
)
)
# Show Other Summaries
model_summary <-
lm(Social_Media_Use ~
Age + Sense_of_Belonging,
data = df_sob) |>
summary()
# Create a data frame with the desired values
mod2 <- data.frame(
Metric = c("Residual Standard Error", "Multiple R-squared", "Adjusted R-squared", "F-statistic", "p-value"),
Value = c(
model_summary$sigma,                        # Residual Standard Error
model_summary$r.squared,                    # Multiple R-squared
model_summary$adj.r.squared,                # Adjusted R-squared
model_summary$fstatistic[1],                # F-statistic
pf(model_summary$fstatistic[1], model_summary$fstatistic[2], model_summary$fstatistic[3], lower.tail = FALSE)  # p-value
)
)
# Convert to a gt table
mod2 |>
gt() |>
tab_header(
title = "Regression Model Summary"
)
# Convert to a gt table
mod2 |>
gt() |>
fmt_auto() |>
tab_header(
title = "Regression Model Summary"
)
# Convert to a gt table
mod2 |>
gt() |>
fmt_auto() |>
tab_header(
title = "Regression Model Summary",
subtitle = "Predicting Social Media Use for Age and Sense of Belonging"
)
# Convert to a gt table
mod2 |>
gt() |>
fmt_auto() |>
tab_header(
title = "Regression Model Summary",
subtitle = "Predicting Social Media Use for Age and Sense of Belonging"
)
# Convert to a gt table
mod2 |>
gt() |>
fmt_auto() |>
tab_header(
title = "Regression Model Summary",
subtitle = md("*Predicting Social Media Use for Age and Sense of Belonging*")
)
# Convert to a gt table
mod2 |>
gt() |>
fmt_auto() |>
tab_header(
title = md("**Regression Model Summary**"),
subtitle = md("*Predicting Social Media Use for Age and Sense of Belonging*")
)
# Create a data frame with the desired values
mod2 <- data.frame(
Metric = c("Residual Standard Error", "Multiple R-squared", "Adjusted R-squared", "F-statistic", "p"),
Value = c(
model_summary$sigma,                        # Residual Standard Error
model_summary$r.squared,                    # Multiple R-squared
model_summary$adj.r.squared,                # Adjusted R-squared
model_summary$fstatistic[1],                # F-statistic
pf(model_summary$fstatistic[1], model_summary$fstatistic[2], model_summary$fstatistic[3], lower.tail = FALSE)  # p-value
)
)
# Convert to a gt table
mod2 |>
gt() |>
fmt_auto() |>
tab_header(
title = md("**Regression Model Summary**"),
subtitle = md("*Predicting Social Media Use for Age and Sense of Belonging*")
)
model_summary$fstatistic
pf(model_summary$fstatistic)
pf(model_summary$fstatistic[]1)
pf(model_summary$fstatistic[1])
pf(model_summary$fstatistic[1],model_summary$fstatistic[2],model_summary$fstatistic[3])
pf(model_summary$fstatistic[1],model_summary$fstatistic[2],model_summary$fstatistic[3],lower.tail = F)
pf(model_summary$fstatistic[1],model_summary$fstatistic[2],model_summary$fstatistic[3],lower.tail = t)
mod2 |>
gt() |>
fmt_auto() |>
tab_header(
title = md("**Regression Model Summary**"),
subtitle = md("*Predicting Social Media Use for Age and Sense of Belonging*")
)
sm_mod
sm_mod
# Set seed for reproducibility
set.seed(123)
# Generate 30 participants
n <- 30
# Continuous predictors
duration_tv <- round(runif(n, 0.5, 5), 2)  # Hours of TV watched
cups_of_coffee <- sample(0:5, n, replace = TRUE)  # Cups of coffee
prior_sleep <- round(rnorm(n, mean = 7, sd = 1.5), 2)  # Hours of sleep
# Categorical predictor: TV Show Genre (Drama, Comedy, Documentary)
tv_genre <- sample(c("Drama", "Comedy", "Documentary"), n, replace = TRUE)
# Assign numeric values for regression (Dummy coding: Comedy as reference)
tv_genre_num <- ifelse(tv_genre == "Drama", 1, ifelse(tv_genre == "Documentary", 2, 0))
# Generate energy level using a regression model
energy_level <- 3.5 +
(1.2 * duration_tv) +
(0.8 * cups_of_coffee) +
(-0.5 * prior_sleep) +
(1.5 * tv_genre_num) +  # Drama increases energy, Documentary increases it more
rnorm(n, mean = 0, sd = 1)  # Add some random noise
# Round energy levels for readability
energy_level <- round(energy_level, 2)
# Create a data frame
df_cat <- data.frame(
Participant = paste0("P", 1:n),
Duration_TV = duration_tv,
Cups_of_Coffee = cups_of_coffee,
Prior_Sleep = prior_sleep,
TV_Genre = tv_genre,
Energy_Level = energy_level
)
model_3 <- lm(Energy_Level ~ Duration_TV + Cups_of_Coffee + Prior_Sleep + TV_Genre, data = df)
model_3 <- lm(Energy_Level ~ Duration_TV + Cups_of_Coffee + Prior_Sleep + TV_Genre, data = df_cat)
summary(model_3)
tbl_regression(model_3,intercept = TRUE)
tbl_regression(model_3,intercept = TRUE) |>
as_gt() |>
tab_header(title = "Energy Level Model",
subtitle = "What is the best predictor?")
library(ggplot2)
data <- data.frame(Scores = c(72, 74, 76, 78, 80, 81, 77, 79, 78, 76,
80, 82, 74, 75, 78, 77, 76, 79, 80, 78))
ggplot(data, aes(y = Scores)) +
geom_boxplot(fill = "lightblue", color = "black") +
geom_hline(yintercept = 78, lty = "dashed") +
theme_minimal() +
ggtitle("Exam Scores Distribution")
ggplot(data, aes(y = Scores)) +
geom_hline(yintercept = 78, lty = "dashed") +
geom_boxplot(fill = "lightblue", color = "black") +
theme_minimal() +
ggtitle("Exam Scores Distribution")
ggplot(data, aes(y = Scores)) +
geom_hline(yintercept = 78, lty = "dashed") +
geom_boxplot(fill = "lightblue", color = "black") +
theme_minimal() +
ggtitle("Exam Scores Distribution")
ggplot(data, aes(y = Scores)) +
geom_hline(yintercept = 78, lty = "dashed") +
geom_boxplot(fill = "lightblue", color = "red") +
theme_minimal() +
ggtitle("Exam Scores Distribution")
ggplot(data, aes(y = Scores)) +
geom_hline(yintercept = 78, lty = "dashed", color = "red") +
geom_boxplot(fill = "lightblue", color = "black") +
theme_minimal() +
ggtitle("Exam Scores Distribution")
ggplot(data, aes(y = Scores)) +
geom_boxplot(fill = "lightblue", color = "black") +
geom_hline(yintercept = 78, lty = "dashed", color = "red") +
theme_minimal() +
ggtitle("Exam Scores Distribution")
ggplot(data, aes(y = Scores)) +
geom_boxplot(fill = "lightblue", color = "black") +
geom_hline(yintercept = 78, lty = "dashed", color = "red") +
theme_minimal() +
ggtitle("Exam Scores Distribution") +
annotate("text", x = 1.2, y = median(data$score),
label = "Median", hjust = 0, color = "blue") +
# Annotate IQR (Box)
annotate("text", x = 1.2, y = quantile(data$score, 3/4),
label = "Q3 (75th percentile)", hjust = 0, color = "red") +
annotate("text", x = 1.2, y = quantile(data$score, 1/4),
label = "Q1 (25th percentile)", hjust = 0, color = "red") +
# Annotate Whiskers
annotate("text", x = 0.8, y = max(data$score),
label = "Max (Upper Whisker)", hjust = 1, color = "black") +
annotate("text", x = 0.8, y = min(data$score),
label = "Min (Lower Whisker)", hjust = 1, color = "black")
ggplot(data, aes(y = Scores)) +
geom_boxplot(fill = "lightblue", color = "black") +
geom_hline(yintercept = 78, lty = "dashed", color = "red") +
theme_minimal() +
ggtitle("Exam Scores Distribution") +
annotate("text", x = 1.2, y = median(data$Scores),
label = "Median", hjust = 0, color = "blue") +
# Annotate IQR (Box)
annotate("text", x = 1.2, y = quantile(data$Scores, 3/4),
label = "Q3 (75th percentile)", hjust = 0, color = "red") +
annotate("text", x = 1.2, y = quantile(data$Scores, 1/4),
label = "Q1 (25th percentile)", hjust = 0, color = "red") +
# Annotate Whiskers
annotate("text", x = 0.8, y = max(data$Scores),
label = "Max (Upper Whisker)", hjust = 1, color = "black") +
annotate("text", x = 0.8, y = min(data$Scores),
label = "Min (Lower Whisker)", hjust = 1, color = "black")
install.packages("gander")
