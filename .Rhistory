panel.spacing = unit(1, "lines")
) +
expand_limits(y = max(report_words_clean %>% group_by(year, word) %>% count() %>% pull(n)) * 1.1)
report_words_clean %>%
group_by(year, word) %>%
count(sort = TRUE, name = "n") %>%
arrange(desc(n)) %>%
group_by(year) %>%
slice_max(n, n = 10, with_ties = FALSE) %>%
mutate(ismax = n == max(n),
label = if_else(ismax, word, NA_character_)) %>%
ungroup() %>%
ggplot(aes(fct_reorder(word, n), n, fill = ismax)) +
geom_col(color = "black", width = 0.8, show.legend = FALSE) +
coord_flip() +
facet_wrap(~year, scales = "free_y", ncol = 4) +
scale_fill_manual(values = c(`TRUE` = "#CB444A", `FALSE` = "grey90")) +
geom_text(aes(label = label), hjust = -0.1, color = "#CB444A", size = 3.5, fontface = "bold", na.rm = TRUE) +
labs(
x = NULL,
y = NULL,
title = "Most Frequent Words in Amazon Annual Reports (2005–2023)",
subtitle = "Top 10 per year; words most used per year highlighted in red.",
caption = "Source: Amazon Annual Reports OCR (2005–2023)"
) +
theme_minimal(base_size = 15) +
theme(
plot.title.position = "plot",
plot.title = element_text(size = 20, face = "bold"),
plot.subtitle = element_text(face = "italic", size = 13),
plot.caption = element_text(face = "italic", size = 10),
axis.text.y = element_text(face = "bold"),
axis.text.x = element_blank(),
panel.grid.major.y = element_blank(),
strip.background = element_rect(colour = NA, fill = "grey95"),
strip.text = element_text(face = "bold", size = 12),
plot.background = element_rect(fill = "#F8F8F8", color = NA),
panel.spacing = unit(1, "lines")
) +
expand_limits(y = max(report_words_clean %>% group_by(year, word) %>% count() %>% pull(n)) * 1.1)
report_words_clean %>%
group_by(year, word) %>%
count(sort = TRUE, name = "n") %>%
arrange(desc(n)) %>%
group_by(year) %>%
slice_max(n, n = 10, with_ties = FALSE) %>%
mutate(ismax = n == max(n),
label = if_else(ismax, word, NA_character_)) %>%
ungroup() %>%
ggplot(aes(fct_reorder(word, n), n, fill = ismax)) +
geom_col(color = "black", width = 0.8, show.legend = FALSE) +
coord_flip() +
facet_wrap(~year, scales = "free_y", ncol = 4) +
scale_fill_manual(values = c(`TRUE` = "#CB444A", `FALSE` = "grey90")) +
geom_text(aes(label = label), hjust = -0.1, color = "#CB444A", size = 3.5, fontface = "bold", na.rm = TRUE) +
labs(
x = NULL,
y = NULL,
title = "Most Frequent Words in Amazon Annual Reports (2005–2023)",
subtitle = "Top 10 per year; words most used per year highlighted in red.",
caption = "Source: Amazon Annual Reports OCR (2005–2023)"
) +
theme_minimal(base_size = 15) +
theme(
plot.title.position = "plot",
plot.title = element_text(size = 20, face = "bold"),
plot.subtitle = element_text(face = "italic", size = 13),
plot.caption = element_text(face = "italic", size = 10),
axis.text.y = element_text(face = "bold"),
axis.text.x = element_blank(),
panel.grid.major.y = element_blank(),
strip.background = element_rect(colour = NA, fill = "grey95"),
strip.text = element_text(face = "bold", size = 12),
plot.background = element_rect(fill = "#F8F8F8", color = NA),
panel.spacing = unit(1, "lines")
)
report_words_clean %>%
group_by(year, word) %>%
count(sort = TRUE, name = "n") %>%
arrange(desc(n)) %>%
group_by(year) %>%
slice_max(n, n = 10, with_ties = FALSE) %>%
mutate(ismax = n == max(n),
label = if_else(ismax, word, NA_character_)) %>%
ungroup() %>%
ggplot(aes(fct_reorder(word, n), n, fill = ismax)) +
geom_col(color = "black", width = 0.8, show.legend = FALSE) +
coord_flip() +
facet_wrap(~year, scales = "free_y", ncol = 5) +
scale_fill_manual(values = c(`TRUE` = "#CB444A", `FALSE` = "grey90")) +
geom_text(aes(label = label), hjust = -0.1, color = "#CB444A", size = 3.5, fontface = "bold", na.rm = TRUE) +
labs(
x = NULL,
y = NULL,
title = "Most Frequent Words in Amazon Annual Reports (2005–2023)",
subtitle = "Top 10 per year; words most used per year highlighted in red.",
caption = "Source: Amazon Annual Reports OCR (2005–2023)"
) +
theme_minimal(base_size = 15) +
theme(
plot.title.position = "plot",
plot.title = element_text(size = 20, face = "bold"),
plot.subtitle = element_text(face = "italic", size = 13),
plot.caption = element_text(face = "italic", size = 10),
axis.text.y = element_text(face = "bold"),
axis.text.x = element_blank(),
panel.grid.major.y = element_blank(),
strip.background = element_rect(colour = NA, fill = "grey95"),
strip.text = element_text(face = "bold", size = 12),
plot.background = element_rect(fill = "#F8F8F8", color = NA),
panel.spacing = unit(1, "lines")
)
report_words_clean %>%
group_by(year, word) %>%
count(sort = TRUE, name = "n") %>%
arrange(desc(n)) %>%
group_by(year) %>%
slice_max(n, n = 10, with_ties = FALSE) %>%
mutate(ismax = n == max(n),
label = if_else(ismax, word, NA_character_)) %>%
ungroup() %>%
ggplot(aes(fct_reorder(word, n), n, fill = ismax)) +
geom_col(color = "black", width = 0.8, show.legend = FALSE) +
coord_flip() +
facet_wrap(~year, scales = "free_y", ncol = 5) +
scale_fill_manual(values = c(`TRUE` = "#CB444A", `FALSE` = "grey90")) +
geom_text(aes(label = label), hjust = -0.1, color = "#CB444A", size = 3.5, fontface = "bold", na.rm = TRUE) +
labs(
x = NULL,
y = NULL,
title = "Most Frequent Words in Amazon Annual Reports (2005–2023)",
subtitle = "Top 10 per year; words most used per year highlighted in red.",
caption = "Source: Amazon Annual Reports OCR (2005–2023)"
) +
theme_minimal(base_size = 12) +
theme(
plot.title.position = "plot",
plot.title = element_text(size = 20, face = "bold"),
plot.subtitle = element_text(face = "italic", size = 13),
plot.caption = element_text(face = "italic", size = 10),
axis.text.y = element_text(face = "bold"),
axis.text.x = element_blank(),
panel.grid.major.y = element_blank(),
strip.background = element_rect(colour = NA, fill = "grey95"),
strip.text = element_text(face = "bold", size = 12),
plot.background = element_rect(fill = "#F8F8F8", color = NA),
panel.spacing = unit(1, "lines")
)
report_words_clean %>%
group_by(year, word) %>%
count(sort = TRUE, name = "n") %>%
arrange(desc(n)) %>%
group_by(year) %>%
slice_max(n, n = 10, with_ties = FALSE) %>%
mutate(ismax = n == max(n),
label = if_else(ismax, word, NA_character_)) %>%
ungroup() %>%
ggplot(aes(fct_reorder(word, n), n, fill = ismax)) +
geom_col(color = "black", width = 0.8, show.legend = FALSE) +
coord_flip() +
facet_wrap(~year, scales = "free_y", ncol = 5) +
scale_fill_manual(values = c(`TRUE` = "#CB444A", `FALSE` = "grey90")) +
geom_text(aes(label = label), hjust = -0.1, color = "#CB444A", size = 3.5, fontface = "bold", na.rm = TRUE) +
labs(
x = NULL,
y = NULL,
title = "Most Frequent Words in Amazon Annual Reports (2005–2023)",
subtitle = "Top 10 per year; words most used per year highlighted in red.",
caption = "Source: Amazon Annual Reports OCR (2005–2023)"
) +
theme_minimal() +
theme(
plot.title.position = "plot",
plot.title = element_text(size = 20, face = "bold"),
plot.subtitle = element_text(face = "italic", size = 13),
plot.caption = element_text(face = "italic", size = 10),
axis.text.y = element_text(face = "bold"),
axis.text.x = element_blank(),
panel.grid.major.y = element_blank(),
strip.background = element_rect(colour = NA, fill = "grey95"),
strip.text = element_text(face = "bold", size = 12),
plot.background = element_rect(fill = "#F8F8F8", color = NA),
panel.spacing = unit(1, "lines")
)
report_words_clean %>%
group_by(year, word) %>%
count(sort = TRUE, name = "n") %>%
arrange(desc(n)) %>%
group_by(year) %>%
slice_max(n, n = 10, with_ties = FALSE) %>%
mutate(ismax = n == max(n),
label = if_else(ismax, word, NA_character_)) %>%
ungroup() %>%
ggplot(aes(fct_reorder(word, n), n, fill = ismax)) +
geom_col(color = "black", width = 0.8, show.legend = FALSE) +
coord_flip() +
facet_wrap(~year, scales = "free_y", ncol = 5) +
scale_fill_manual(values = c(`TRUE` = "#CB444A", `FALSE` = "grey90")) +
labs(
x = NULL,
y = NULL,
title = "Most Frequent Words in Amazon Annual Reports (2005–2023)",
subtitle = "Top 10 per year; words most used per year highlighted in red.",
caption = "Source: Amazon Annual Reports OCR (2005–2023)"
) +
theme_minimal() +
theme(
plot.title.position = "plot",
plot.title = element_text(size = 20, face = "bold"),
plot.subtitle = element_text(face = "italic", size = 13),
plot.caption = element_text(face = "italic", size = 10),
axis.text.y = element_text(face = "bold"),
axis.text.x = element_blank(),
panel.grid.major.y = element_blank(),
strip.background = element_rect(colour = NA, fill = "grey95"),
strip.text = element_text(face = "bold", size = 12),
plot.background = element_rect(fill = "#F8F8F8", color = NA),
panel.spacing = unit(1, "lines")
)
# Fetch data from the CSV download link at https://grant-watch.us/nsf-data.html
raw_nsf_terminations <- readr::read_csv("https://drive.usercontent.google.com/download?id=1TFoyowiiMFZm73iU4YORniydEeHhrsVz&export=download")
raw_nsf_terminations
raw_nsf_terminations |> View()
raw_nsf_terminations$usaspending_obligated
raw_nsf_terminations$usaspending_obligated |> readr::parse_number()
stringi::stri_replace_first_fixed(nsf_terminations$usaspending_obligated, "$", "")
stringi::stri_replace_first_fixed(raw_nsf_terminations$usaspending_obligated, "$", "")
raw_nsf_terminations$usaspending_obligated |> readr::parse_number()
raw_nsf_terminations$in_cruz_list
raw_nsf_terminations |>
janitor::clean_names() |>
mutate(usaspending_obligated = readr::parse_number(usaspending_obligated)) |>
mutate(in_cruz_list = !is.na(in_cruz_list))
raw_nsf_terminations |>
janitor::clean_names() |>
mutate(usaspending_obligated = readr::parse_number(usaspending_obligated)) |>
mutate(in_cruz_list = !is.na(in_cruz_list)) |> select(in_cruz_list)
# Clean the data
nsf_terminations <- raw_nsf_terminations |>
janitor::clean_names() |>
mutate(usaspending_obligated = readr::parse_number(usaspending_obligated)) |>
mutate(in_cruz_list = !is.na(in_cruz_list)) |>
mutate(grant_number = as.character(grant_number))
# Clean the data
nsf_terminations <-
raw_nsf_terminations |>
janitor::clean_names() |>
mutate(usaspending_obligated = readr::parse_number(usaspending_obligated)) |>
mutate(in_cruz_list = !is.na(in_cruz_list)) |>
mutate(grant_number = as.character(grant_number))
nsf_terminations |> group_by(nsf_total_budget) |> count()
nsf_terminations |> group_by(usaspending_obligated) |> count()
nsf_terminations |> group_by(usaspending_obligated) |> summarise(all=sum(usaspending_obligated))
nsf_terminations |>
summarise(all=sum(usaspending_obligated))
nsf_terminations |>
summarise(all=sum(usaspending_obligated,na.rm = TRUE))
nsf_terminations |>
summarise(all=sum(usaspending_obligated,na.rm = TRUE)) |> prettyNum()
nsf_terminations |>
summarise(all=sum(usaspending_obligated,na.rm = TRUE))
nsf_terminations |>
summarise(all=sum(usaspending_obligated,na.rm = TRUE)) |> prettyunits::pretty_num()
mutate(all = prettyunits::pretty_num(all)
nsf_terminations |>
summarise(all=sum(usaspending_obligated,na.rm = TRUE)) |>
mutate(all = prettyunits::pretty_num(all))
?prettyNum()
mutate(all = gt::fmt_auto()
nsf_terminations |>
nsf_terminations |>
summarise(all=sum(usaspending_obligated,na.rm = TRUE)) |>
mutate(all = gt::fmt_auto(all))
nsf_terminations |>
summarise(all=sum(usaspending_obligated,na.rm = TRUE))
?comma
nsf_terminations |>
summarise(all=sum(usaspending_obligated,na.rm = TRUE)) |>
mutate(all = scales::label_comma())
nsf_terminations |>
summarise(all=sum(usaspending_obligated,na.rm = TRUE)) |>
mutate(all = scales::label_comma(all))
mutate(all = all |> scales::label_comma()
nsf_terminations |>
nsf_terminations |>
summarise(all=sum(usaspending_obligated,na.rm = TRUE)) |>
mutate(all = all |> scales::comma())
nsf_terminations |> View()
nsf_terminations |> group_by(org_name) |> count()
nsf_terminations |> group_by(org_name) |> count(sort = TRUE)
nsf_terminations |> group_by(org_name) |> count(sort = TRUE) |> View()
bslib::card
library(bslib)
c1 <-
card(
card_header("Favorite TV Show"),
card_image(src ="https://resizing.flixster.com/lpJkDxnEFNQT1OWJjnmYfvpAHJ0=/ems.cHJkLWVtcy1hc3NldHMvdHZzZXJpZXMvUlRUVjI2NjgyOS53ZWJw")
)
install.packages("leaflet")
leaflet::getMapData(
leaflet() %>%
addTiles() %>%
addMarkers(lng=174.768, lat=-36.852,
popup="The birthplace of R")
)
leaflet::getMapData(
leaflet() |>
addTiles() |>
addMarkers(lng=174.768, lat=-36.852,
popup="The birthplace of R")
)
?leaflet::leafletSizingPolicy()
?leaflet::leaflet()
library(leaflet)
library(leaflet)
leaflet() %>%
addTiles() %>%
addMarkers(lat=40.750543,lng=-73.429724,
popup="Farmingdale State College") |>
leafletOptions(minZoom = 3)
library(leaflet)
leaflet() %>%
addTiles() %>%
addMarkers(lat=40.750543,lng=-73.429724,
popup="Farmingdale State College") |>
leafletOptions(minZoom = 5)
library(leaflet)
leaflet() %>%
addTiles() %>%
addMarkers(lat=40.750543,lng=-73.429724,
popup="Farmingdale State College") |>
leafletOptions(minZoom = 10)
library(leaflet)
leaflet() %>%
addTiles() %>%
addMarkers(lat=40.750543,lng=-73.429724,
popup="Farmingdale State College") |>
leafletOptions(minZoom = "40%")
library(leaflet)
leaflet() %>%
addTiles() %>%
addMarkers(lat=40.750543,lng=-73.429724,
popup="Farmingdale State College") |>
leafletOptions(minZoom = "80%")
library(leaflet)
leaflet() %>%
addTiles() %>%
addMarkers(lat=40.750543,lng=-73.429724,
popup="Farmingdale State College") |>
leafletOptions(minZoom = 20)
library(leaflet)
leaflet() %>%
addTiles() %>%
addMarkers(lat=40.750543,lng=-73.429724,
popup="Farmingdale State College") |>
leafletOptions(minZoom = 80)
leafletOptions
library(leaflet)
leaflet() %>%
addTiles() %>%
addMarkers(lat=40.750543,lng=-73.429724,
popup="Farmingdale State College") |>
leafletOptions(minZoom = 1)
library(leaflet)
leaflet() %>%
addTiles() %>%
addMarkers(lat=40.750543,lng=-73.429724,
popup="Farmingdale State College") |>
leafletOptions(minZoom = 2)
library(leaflet)
leaflet() %>%
addTiles() %>%
addMarkers(lat=40.750543,lng=-73.429724,
popup="Farmingdale State College") |>
leafletOptions(minZoom = 200)
library(leaflet)
leaflet() %>%
addTiles() %>%
addMarkers(lat=40.750543,lng=-73.429724,
popup="Farmingdale State College") |>
leafletOptions(minZoom = 2000)
library(leaflet)
leaflet() %>%
addTiles() %>%
addMarkers(lat=40.750543,lng=-73.429724,
popup="Farmingdale State College") |>
leafletOptions(minZoom = "100") |>
leafletCRS(scales = "px")
leaflet() %>%
addTiles() %>%
addMarkers(lat=40.750543,lng=-73.429724,
popup="Farmingdale State College") |>
leafletOptions(minZoom = "100")
library(leaflet)
leaflet() %>%
addTiles() %>%
addMarkers(lat=40.750543,lng=-73.429724,
popup="Farmingdale State College") |>
leafletOptions(minZoom = "100px")
library(leaflet)
leaflet() %>%
addTiles() %>%
addMarkers(lat=40.750543,lng=-73.429724,
popup="Farmingdale State College") |>
leafletOptions(minZoom = "1000px")
library(leaflet)
leaflet() %>%
addTiles() %>%
addMarkers(lat=40.750543,lng=-73.429724, zoom = 12,
popup="Farmingdale State College") |>
leafletOptions(minZoom = "1000px")
library(leaflet)
leaflet() %>%
addTiles() %>%
setView(lat=40.750543,lng=-73.429724, zoom = 12) |>
leafletOptions(minZoom = "1000px")
library(leaflet)
leaflet() %>%
addTiles() %>%
setView(lat=40.750543,lng=-73.429724, zoom = 12)
library(leaflet)
leaflet() %>%
addTiles() %>%
setView(lat=40.750543,lng=-73.429724, zoom = 30)
library(leaflet)
leaflet() %>%
addTiles() %>%
setView(lat=40.750543,lng=-73.429724, zoom = 15)
library(leaflet)
leaflet() %>%
addTiles() %>%
setView(lat=40.750543,lng=-73.429724, zoom = 15) |>
addCircles()
library(leaflet)
leaflet() %>%
addTiles() %>%
setView(lat=40.750543,lng=-73.429724, zoom = 15) |>
addCircles(lat=40.750543, lng=-73.429724)
library(leaflet)
leaflet() %>%
addTiles() %>%
setView(lat=40.750543,lng=-73.429724, zoom = 15) |>
addPopups(lat=40.750543,lng=-73.429724, popup = "Farmingdale State College")
?addCircleMarkers()
leaflet() %>%
addTiles() %>%
setView(lat=40.750543,lng=-73.429724, zoom = 15) |>
addPopups(lat=40.750543,lng=-73.429724, popup = "Farmingdale State College") |>
addCircleMarkers(lat=40.750543,lng=-73.429724)
leaflet() %>%
addTiles() %>%
setView(lat=40.750543,lng=-73.429724, zoom = 15) |>
addCircleMarkers(lat=40.750543,lng=-73.429724)
library(leaflet)
leaflet() %>%
addTiles() %>%
setView(lat=40.750543,lng=-73.429724, zoom = 15) |>
addCircleMarkers(lat=40.750543,lng=-73.429724,20)
library(leaflet)
leaflet() %>%
addTiles() %>%
setView(lat=40.750543,lng=-73.429724, zoom = 15) |>
addCircleMarkers(lat=40.750543,lng=-73.429724,200)
library(leaflet)
leaflet() %>%
addTiles() %>%
setView(lat=40.750543,lng=-73.429724, zoom = 15) |>
addCircleMarkers(lat=40.750543,lng=-73.429724,100)
library(leaflet)
leaflet() %>%
addTiles() %>%
setView(lat=40.750543,lng=-73.429724, zoom = 15) |>
addCircleMarkers(lat=40.750543,lng=-73.429724,50)
library(readxl)
library(readxl)
ev <- read_excel("statscomments.xlsx")
ev$Type |> table()
ev |>
filter(Type == "Instructor Comments")
library(readxl)
ev <- read_excel("statscomments.xlsx")
ev |>
filter(Type == "Instructor Comments")
ev$Type
library(dplyr)
ev <- read_excel("statscomments.xlsx")
ev |>
filter(Type == "Instructor Comments")
ev |>
filter(Type == "Instructor Comments") |>
select("Comment")
library(gt)
ev_c <-
ev |>
filter(Type == "Instructor Comments") |>
select("Comment")
cat(paste0("- {.fragment} ", ev, collapse = "\n"))
ev_c <-
ev |>
filter(Type == "Instructor Comments") |>
select("Comment")
cat(paste0("- {.fragment} ", ev_c, collapse = "\n"))
paste0("- {.fragment} ", ev_c, collapse = "\n")
cat(paste0("- {.fragment} ", ev_c, collapse = "\n"))
cat(paste0("- {.fragment} ", ev_c$Comment, collapse = "\n"))
cat(paste0(":::{.fragment} ", ev_c$Comment, ":::", collapse = "\n"))
ev_c <-
ev |>
filter(Type == "Instructor Comments") |>
select("Comment")
cat(paste0("<li>", ev_c$Comment,"</li>",collapse = "\n"))
cat(paste0("<li>", ev_c$Comment,"</li>",collapse = "\n"))
