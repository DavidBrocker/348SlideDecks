geom_point() +
ggtitle(paste("Scatterplot with correlation", rho)) +
theme_minimal() +
geom_smooth(method = "lm",
se = FALSE
color = "red")
# Plot the data
ggplot(data, aes(x = X, y = Y)) +
geom_point() +
ggtitle(paste("Scatterplot with correlation", rho)) +
theme_minimal() +
geom_smooth(method = "lm",
se = FALSE,
color = "red")
# Plot the data
ggplot(data, aes(x = X, y = Y)) +
geom_point() +
ggtitle(paste("Scatterplot with correlation", rho)) +
theme_minimal() +
geom_smooth(method = "lm",
se = FALSE,
color = "red",
alpha = .3)
# Plot the data
ggplot(data, aes(x = X, y = Y)) +
geom_point() +
ggtitle(paste("Scatterplot with correlation", rho)) +
theme_minimal() +
geom_smooth(method = "lm",
se = FALSE,
color = "red",
alpha = .2)
# Plot the data
ggplot(data, aes(x = X, y = Y)) +
geom_point() +
ggtitle(paste("Scatterplot with correlation", rho)) +
theme_minimal() +
geom_smooth(method = "lm",
se = FALSE,
color = "red",
alpha = .5)
# Plot the data
ggplot(data, aes(x = X, y = Y)) +
geom_point() +
ggtitle(paste("Scatterplot with correlation", rho)) +
theme_minimal() +
geom_smooth(method = "lm",
se = FALSE,
color = "red",
aes(alpha = .5))
# Plot the data
ggplot(data, aes(x = X, y = Y)) +
geom_point() +
ggtitle(paste("Scatterplot with correlation", rho)) +
theme_minimal() +
geom_smooth(method = "lm",
se = FALSE,
color = "red",
aes(alpha = .2))
# Plot the data
ggplot(data, aes(x = X, y = Y)) +
geom_point() +
ggtitle(paste("Scatterplot with correlation", rho)) +
theme_minimal() +
geom_smooth(method = "lm",
se = FALSE,
color = "red",
aes(alpha = .8))
# Plot the data
ggplot(data, aes(x = X, y = Y)) +
geom_point() +
ggtitle(paste("Scatterplot with correlation", rho)) +
theme_minimal() +
geom_smooth(
aes(
method = "lm",
se = FALSE,
color = "red",
alpha = .8)
)
# Plot the data
ggplot(data, aes(x = X, y = Y)) +
geom_point() +
ggtitle(paste("Scatterplot with correlation", rho)) +
theme_minimal() +
geom_smooth(
method = "lm",
se = FALSE,
aes(
color = "red",
alpha = .8)
)
# Plot the data
ggplot(data, aes(x = X, y = Y)) +
geom_point() +
ggtitle(paste("Scatterplot with correlation", rho)) +
theme_minimal() +
geom_smooth(
method = "lm",
se = FALSE,
aes(
color = "red",
alpha = .02)
)
# Plot the data
ggplot(data, aes(x = X, y = Y)) +
geom_point() +
ggtitle(paste("Scatterplot with correlation", rho)) +
theme_minimal() +
geom_smooth(
method = "lm",
se = FALSE,
aes(
color = "red",
alpha = .3)
)
# Plot the data
ggplot(data, aes(x = X, y = Y)) +
geom_point() +
ggtitle(paste("Scatterplot with correlation", rho)) +
theme_minimal() +
geom_smooth(
method = "lm",
se = FALSE,
aes(
color = "red",
alpha = .8)
)
# Plot the data
ggplot(data, aes(x = X, y = Y)) +
geom_point() +
ggtitle(paste("Scatterplot with correlation", rho)) +
theme_minimal() +
geom_smooth(
method = "lm",
se = FALSE,
aes(
color = "red",
alpha = 1)
)
# Plot the data
ggplot(data, aes(x = X, y = Y)) +
geom_point() +
ggtitle(paste("Scatterplot with correlation", rho)) +
theme_minimal() +
geom_smooth(
method = "lm",
se = FALSE,
aes(
color = "red",
alpha = .5)
)
# Plot the data
ggplot(data, aes(x = X, y = Y)) +
geom_point() +
ggtitle(paste("Scatterplot with correlation", rho)) +
theme_minimal() +
geom_smooth(
method = "lm",
se = FALSE,
aes(
color = "red",
alpha = .3)
)
# Plot the data
ggplot(data, aes(x = X, y = Y)) +
geom_point() +
ggtitle(paste("Scatterplot with correlation", rho)) +
theme_minimal() +
geom_smooth(
method = "lm",
se = FALSE,
color = "red"
)
# Plot the data
ggplot(data, aes(x = X, y = Y)) +
geom_point() +
ggtitle(paste("Scatterplot with correlation", rho)) +
theme_minimal() +
geom_smooth(
method = "lm",
se = FALSE,
color = "red",
alpha = .3)
# Plot the data
ggplot(data, aes(x = X, y = Y)) +
geom_point() +
ggtitle(paste("Scatterplot with correlation", rho)) +
theme_minimal() +
geom_smooth(
method = "lm",
se = FALSE,
color = "red",
alpha = .3)
# Plot the data
ggplot(data, aes(x = X, y = Y)) +
geom_point() +
ggtitle(paste("Scatterplot with correlation", rho)) +
theme_minimal() +
geom_smooth(
method = "lm",
se = FALSE,
color = "red",
alpha = .3) +
theme_classic()
# Plot the data
ggplot(data, aes(x = X, y = Y)) +
geom_point() +
ggtitle(paste("Scatterplot with correlation", rho)) +
theme_minimal() +
geom_smooth(
method = "lm",
se = FALSE,
color = "red",
alpha = .3) +
theme_classic() +
theme(
axis.text = element_blank()
)
# Plot the data
ggplot(data, aes(x = X, y = Y)) +
geom_point() +
ggtitle(paste("Scatterplot with correlation", rho)) +
theme_minimal() +
geom_smooth(
method = "lm",
se = FALSE,
color = "red",
alpha = .3) +
theme_classic() +
theme(
axis.text = element_blank(),
axis.title = element_blank()
)
# Plot the data
ggplot(data, aes(x = X, y = Y)) +
geom_point() +
labs(
title = "Positive Correlations") +
theme_minimal() +
geom_smooth(
method = "lm",
se = FALSE,
color = "red",
alpha = .3) +
theme_classic() +
theme(
axis.text = element_blank(),
axis.title = element_blank()
)
# Plot the data
ggplot(data, aes(x = X, y = Y)) +
geom_point() +
labs(
title = "Positive Correlation") +
theme_minimal() +
geom_smooth(
method = "lm",
se = FALSE,
color = "red",
alpha = .3) +
theme_classic() +
theme(
axis.text = element_blank(),
axis.title = element_blank()
)
library(patchwork)
# Example: Generate data with a correlation of 0.7
n <- 100  # Number of data points
rho <- -0.7  # Desired correlation
data <- generate_correlation(n, rho)
cor(data$X,data$Y)
p2 <-
ggplot(data, aes(x = X, y = Y)) +
geom_point() +
labs(
title = "Negative Correlation") +
theme_minimal() +
geom_smooth(
method = "lm",
se = FALSE,
color = "red",
alpha = .3) +
theme_classic() +
theme(
axis.text = element_blank(),
axis.title = element_blank()
)
# Example: Generate data with a correlation of 0.7
n <- 100  # Number of data points
rho <- 0.01  # Desired correlation
data <- generate_correlation(n, rho)
p3 <-
ggplot(data, aes(x = X, y = Y)) +
geom_point() +
labs(
title = "No Correlation") +
theme_minimal() +
geom_smooth(
method = "lm",
se = FALSE,
color = "red",
alpha = .3) +
theme_classic() +
theme(
axis.text = element_blank(),
axis.title = element_blank()
)
p1 + p2 + p3
library(ggplot2)
library(dplyr)
library(MASS)
library(patchwork)
# Load necessary libraries
set.seed(123)  # For reproducibility
# Function to simulate two variables with a specific correlation
generate_correlation <- function(n, rho) {
# Define the mean and covariance matrix
mean_vector <- c(0, 0)
covariance_matrix <- matrix(c(1, rho, rho, 1), nrow = 2)
# Generate correlated data using mvrnorm from the MASS package
data <- mvrnorm(n = n, mu = mean_vector, Sigma = covariance_matrix)
# Convert to a data frame
data_frame <- data.frame(X = data[, 1], Y = data[, 2])
return(data_frame)
}
# Example: Generate data with a correlation of 0.7
n <- 100  # Number of data points
rho <- 0.7  # Desired correlation
data <- generate_correlation(n, rho)
# Verify the correlation
cor(data$X, data$Y)
# Plot the data
p1 <-
ggplot(data, aes(x = X, y = Y)) +
geom_point() +
labs(
title = "Positive Correlation") +
theme_minimal() +
geom_smooth(
method = "lm",
se = FALSE,
color = "red",
alpha = .3) +
theme_classic() +
theme(
axis.text = element_blank(),
axis.title = element_blank()
)
# Example: Generate data with a correlation of 0.7
n <- 100  # Number of data points
rho <- -0.7  # Desired correlation
data <- generate_correlation(n, rho)
p2 <-
ggplot(data, aes(x = X, y = Y)) +
geom_point() +
labs(
title = "Negative Correlation") +
theme_minimal() +
geom_smooth(
method = "lm",
se = FALSE,
color = "red",
alpha = .3) +
theme_classic() +
theme(
axis.text = element_blank(),
axis.title = element_blank()
)
# Example: Generate data with a correlation of 0.7
n <- 100  # Number of data points
rho <- 0.01  # Desired correlation
data <- generate_correlation(n, rho)
p3 <-
ggplot(data, aes(x = X, y = Y)) +
geom_point() +
labs(
title = "No Correlation") +
theme_minimal() +
geom_smooth(
method = "lm",
se = FALSE,
color = "red",
alpha = .3) +
theme_classic() +
theme(
axis.text = element_blank(),
axis.title = element_blank()
)
p1 + p2 + p3
p1+p2+p3
library(huxtable)
library(janitor)
tibble(
var = c("Age","Song 1","Song 2"),
M = c(20.91,4.21,6.42),
s = c(1.76,1.2,2.18),
var1 = c("1",".03",".65**"),
var2 = c("--","1","-.34*"),
var3 = c("--","--","1",)
) |> hux() |>
theme_article()
tibble(
var = c("Age","Song 1","Song 2"),
M = c(20.91,4.21,6.42),
s = c(1.76,1.2,2.18),
var1 = c("1",".03",".65**"),
var2 = c("--","1","-.34*"),
var3 = c("--","--","1")
) |> hux() |>
theme_article()
tab <-
tibble(
var = c("Age","Song 1","Song 2"),
M = c(20.91,4.21,6.42),
s = c(1.76,1.2,2.18),
var1 = c("1",".03",".65**"),
var2 = c("--","1","-.34*"),
var3 = c("--","--","1")
) |> hux() |>
theme_article()
tab
tab[1]
tab[1,1]
tab[1,1] <- ""
tab
tab[4:6,1]
tab[1,4:6]
tab[1,4:6] <- c("1","2","3")
tab
tab |>
set_align(value = "center")
tab |>
set_align(value = "center") |>
huxtable::set_background_color(value = "darkgreen")
tab |>
set_align(value = "center")
tab2 <-
tibble(
var = c("Age","Song 1","Song 2"),
M = c(20.91,4.21,6.42),
s = c(1.76,1.2,2.18),
var1 = c("1","-.03",".65**"),
var2 = c("-.03","1","-.34*"),
var3 = c(".65**","-.34*","1")
) |> hux() |>
theme_article()
tab2[1,1] <- ""
tab2[1,4:6] <- c("1","2","3")
tab2 |>
set_align(value = "center")
# Example: Generate data with a correlation of 0.7
n <- 100  # Number of data points
rho <- 0.72  # Desired correlation
data <- generate_correlation(n, rho)
ggplot(data, aes(x = X, y = Y)) +
geom_point() +
labs(
title = "No Correlation") +
theme_minimal() +
geom_smooth(
method = "lm",
se = FALSE,
color = "red",
alpha = .3) +
theme_classic() +
theme(
axis.text = element_blank(),
axis.title = element_blank()
)
ggplot(data, aes(x = X, y = Y)) +
geom_point() +
labs(
title = "No Correlation") +
theme_minimal()
ggplot(data, aes(x = X, y = Y)) +
geom_point() +
labs(
title = "No Correlation",
x = "Hours Studying",
y = "Exam Score"
) +
theme_minimal()
ggplot(data, aes(x = X, y = Y)) +
geom_point() +
labs(
x = "Hours Studying",
y = "Exam Score"
) +
theme_minimal()
ggplot(data, aes(x = X, y = Y)) +
geom_point() +
labs(
x = "Hours Studying",
y = "Exam Score"
) +
theme_minimal() +
theme(
axis.text = element_blank()
)
ex1 <-
ggplot(data, aes(x = X, y = Y)) +
geom_point() +
labs(
x = "Hours Studying",
y = "Exam Score"
) +
theme_minimal() +
theme(
axis.text = element_blank()
)
sqrt(.72)
